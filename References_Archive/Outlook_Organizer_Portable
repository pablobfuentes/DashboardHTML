<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Outlook Inbox Organizer</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
            border: 1px solid rgba(255, 255, 255, 0.18);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header h1 {
            font-size: 2.5rem;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin: 0;
        }

        .language-toggle {
            display: flex;
            align-items: center;
            gap: 10px;
            flex-direction: column;
        }

        .lang-label {
            font-size: 14px;
            color: #555;
            font-weight: 500;
        }

        .toggle-switch {
            position: relative;
            display: inline-block;
        }

        .toggle-switch input[type="checkbox"] {
            display: none;
        }

        .toggle-labels {
            display: flex;
            justify-content: space-between;
            width: 60px;
            margin-bottom: 5px;
            font-size: 12px;
            font-weight: bold;
            color: #555;
        }

        .toggle-label-text {
            transition: all 0.3s ease;
        }

        .toggle-switch input[type="checkbox"]:not(:checked) + .toggle-container .toggle-labels .en-label {
            color: #667eea;
            transform: scale(1.1);
        }

        .toggle-switch input[type="checkbox"]:checked + .toggle-container .toggle-labels .es-label {
            color: #667eea;
            transform: scale(1.1);
        }

        .toggle-label {
            display: block;
            width: 60px;
            height: 30px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-radius: 15px;
            cursor: pointer;
            position: relative;
            transition: all 0.3s ease;
        }

        .toggle-label::after {
            content: '';
            position: absolute;
            top: 3px;
            left: 3px;
            width: 24px;
            height: 24px;
            background: white;
            border-radius: 50%;
            transition: all 0.3s ease;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

        .toggle-switch input[type="checkbox"]:checked + .toggle-container .toggle-label::after {
            transform: translateX(30px);
        }

        .connect-section {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 25px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .connect-left {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .connect-right {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .import-btn-wrapper {
            display: flex;
            align-items: center;
        }

        .btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
        }

        .gear-btn {
            background: #6c757d;
            color: white;
            border: none;
            padding: 12px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(108, 117, 125, 0.4);
            width: 44px;
            height: 44px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .gear-btn:hover {
            transform: translateY(-2px) rotate(15deg);
            box-shadow: 0 6px 20px rgba(108, 117, 125, 0.6);
            background: #5a6268;
        }

        .status {
            display: inline-block;
            padding: 8px 16px;
            border-radius: 20px;
            font-weight: 500;
            background: #f8d7da;
            color: #721c24;
        }

        .status.connected {
            background: #d4edda;
            color: #155724;
        }

        .status.disconnected {
            background: #f8d7da;
            color: #721c24;
        }

        .tabs {
            display: flex;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 15px;
            margin-bottom: 25px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }

        .tab {
            flex: 1;
            padding: 15px 20px;
            background: transparent;
            border: none;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s ease;
            position: relative;
        }

        .tab.active {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .tab:hover:not(.active) {
            background: rgba(102, 126, 234, 0.1);
        }

        .tab-content {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
            border: 1px solid rgba(255, 255, 255, 0.18);
            min-height: 500px;
        }

        .hidden {
            display: none;
        }

        .filters {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .filter-group label {
            font-weight: 500;
            color: #555;
        }

        .filter-group select {
            padding: 8px 12px;
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        .filter-group select:focus {
            outline: none;
            border-color: #667eea;
        }

        .email-grid {
            display: grid;
            gap: 20px;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
        }

        .email-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            border-left: 4px solid #667eea;
        }

        .email-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .email-header {
            display: flex;
            justify-content: between;
            align-items: flex-start;
            margin-bottom: 15px;
        }

        .email-subject {
            font-weight: 600;
            font-size: 16px;
            color: #333;
            margin-bottom: 5px;
        }

        .email-meta {
            font-size: 12px;
            color: #666;
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }

        .project-tag {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 4px 10px;
            border-radius: 15px;
            font-size: 11px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            display: inline-block;
        }

        .project-tag:hover {
            transform: scale(1.05);
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.4);
        }

        .project-tag.editing {
            background: #f8f9fa;
            color: #333;
            border: 2px solid #667eea;
        }

        .project-editor {
            display: none;
            position: absolute;
            top: 100%;
            left: 0;
            background: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            z-index: 1000;
            min-width: 250px;
            padding: 15px;
            margin-top: 5px;
        }

        .project-editor.active {
            display: block;
        }

        .project-editor input {
            width: 100%;
            padding: 8px 10px;
            border: 1px solid #ddd;
            border-radius: 6px;
            margin-bottom: 12px;
            font-size: 12px;
        }

	.project-editor .input-label {
            font-size: 11px;
            color: #666;
            margin-bottom: 4px;
            display: block;
        }

        .project-editor .existing-projects {
            margin-bottom: 12px;
        }

        .project-editor .existing-projects-label {
            font-size: 11px;
            color: #666;
            margin-bottom: 6px;
            display: block;
        }

        .project-editor .project-buttons {
            display: flex;
            flex-wrap: wrap;
            gap: 4px;
            margin-bottom: 8px;
        }

        .project-editor .project-btn {
            padding: 3px 8px;
            border: 1px solid #ddd;
            border-radius: 12px;
            background: #f8f9fa;
            color: #495057;
            font-size: 10px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .project-editor .project-btn:hover {
            background: #e9ecef;
            border-color: #667eea;
        }

        .project-editor .control-buttons {
            display: flex;
            gap: 6px;
            justify-content: flex-end;
        }

        .project-editor button {
            padding: 6px 12px;
            border: none;
            border-radius: 6px;
            font-size: 11px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .project-editor .save-btn {
            background: #28a745;
            color: white;
        }

        .project-editor .save-btn:hover {
            background: #218838;
        }

        .project-editor .cancel-btn {
            background: #6c757d;
            color: white;
        }

	.project-editor .cancel-btn:hover {
            background: #5a6268;
        }

        .attachments-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .attachments-table th {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 15px;
            text-align: left;
            font-weight: 600;
        }

        .attachments-table td {
            padding: 12px 15px;
            border-bottom: 1px solid #f0f0f0;
        }

        .attachments-table tr:hover {
            background: #f8f9fa;
        }

        .attachment-name {
            font-weight: 500;
            color: #333;
        }

        .attachment-link {
            color: #667eea;
            text-decoration: none;
            font-weight: 500;
        }

        .attachment-link:hover {
            text-decoration: underline;
        }

        .file-icon {
            margin-right: 8px;
            font-size: 16px;
        }

        .summary {
            margin: 15px 0;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
            font-size: 14px;
            line-height: 1.5;
        }

        .actions {
            margin-top: 15px;
        }

        .action-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            background: #fff3cd;
            border-radius: 8px;
            margin-bottom: 8px;
            border-left: 3px solid #ffc107;
        }

        .action-item.my-action {
            background: #ffe6e6;
            border-left-color: #dc3545;
        }

        .action-text {
            flex: 1;
            font-size: 13px;
        }

        .action-meta {
            font-size: 11px;
            color: #666;
            text-align: right;
        }
    .project-overall-summary {
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(5px);
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 30px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .project-overall-summary h3 {
        color: #555;
        margin-bottom: 15px;
        font-size: 1.5rem;
    }

    .project-overall-summary p {
        margin-bottom: 8px;
        line-height: 1.5;
        color: #333;
    }

    .project-overall-summary ul {
        list-style-type: disc;
        margin-left: 20px;
        margin-bottom: 10px;
        color: #333;
    }

    .timeline-date-time {
        font-size: smaller;
        font-style: italic;
        color: #888;
        margin-bottom: 10px; /* Space between date and content columns */
    }

    .timeline-cols {
        display: flex;
        gap: 20px; /* Space between columns */
    }

    .timeline-col-left {
        flex: 3; /* Takes more space */
        min-width: 0; /* Allows content to shrink */
        word-wrap: break-word; /* Ensures long words wrap */
    }

    .timeline-col-right {
        flex: 2; /* Takes less space */
        min-width: 0; /* Allows content to shrink */
        word-wrap: break-word; /* Ensures long words wrap */
        border-left: 1px solid #eee; /* Visual separation */
        padding-left: 20px;
    }

    .timeline-actions-list {
        list-style-type: none; /* No bullets */
        padding-left: 0;
        margin-top: 5px;
    }

    .timeline-actions-list li {
        margin-bottom: 5px;
        padding: 5px;
        background: #f8f9fa; /* Light background for each action */
        border-radius: 5px;
        border-left: 3px solid #667eea; /* Accent border */
    }
        .timeline {
            max-height: 600px;
            overflow-y: auto;
            padding-right: 10px;
        }

        .timeline-item {
            display: flex;
            margin-bottom: 25px;
            position: relative;
        }

        .timeline-item::before {
            content: '';
            position: absolute;
            left: 20px;
            top: 40px;
            bottom: -15px;
            width: 2px;
            background: linear-gradient(135deg, #667eea, #764ba2);
        }

        .timeline-item:last-child::before {
            display: none;
        }

        .timeline-dot {
            width: 12px;
            height: 12px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-radius: 50%;
            margin: 15px 15px 0 15px;
            z-index: 1;
            position: relative;
        }

        .timeline-content {
        flex: 1;
        background: white;
        padding: 15px 20px;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        display: flex; /* Make it a flex container */
        flex-direction: column; /* Stack date and then columns */
    }

        .timeline-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .timeline-date {
            font-size: 12px;
            color: #666;
        }

        .checklist {
            max-height: 600px;
            overflow-y: auto;
        }

        .checklist-item {
            display: flex;
            align-items: center;
            padding: 15px;
            background: white;
            border-radius: 10px;
            margin-bottom: 10px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            border-left: 4px solid #e0e0e0;
        }

        .checklist-item.priority-high {
            border-left-color: #dc3545;
        }

        .checklist-item.priority-medium {
            border-left-color: #ffc107;
        }

        .checklist-item.priority-low {
            border-left-color: #28a745;
        }

        .checklist-item:hover {
            transform: translateX(5px);
        }

        .checklist-item.completed {
            opacity: 0.7;
            text-decoration: line-through;
        }

        .checklist-checkbox {
            margin-right: 15px;
            transform: scale(1.2);
            cursor: pointer;
        }

        .checklist-content {
            flex: 1;
        }

        .checklist-task {
            font-weight: 500;
            margin-bottom: 5px;
        }

        .checklist-meta {
            font-size: 12px;
            color: #666;
        }

        .priority-selector {
            margin: 0 10px;
            padding: 4px 8px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 12px;
            background: white;
            cursor: pointer;
        }

        .priority-high {
            color: #dc3545;
            font-weight: 600;
        }

        .priority-medium {
            color: #ffc107;
            font-weight: 600;
        }

        .priority-low {
            color: #28a745;
            font-weight: 600;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e0e0e0;
            border-radius: 4px;
            margin: 20px 0;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(135deg, #667eea, #764ba2);
            transition: width 0.3s ease;
        }

        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 200px;
            font-size: 18px;
            color: #666;
        }

        .loading::after {
            content: '';
            width: 20px;
            height: 20px;
            border: 2px solid #667eea;
            border-top: 2px solid transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-left: 10px;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .stat-label {
            color: #666;
            font-size: 14px;
            margin-top: 5px;
        }

        /* Filter Modal Styles */
        .filter-modal {
            display: none;
            position: fixed;
            z-index: 10000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
        }

        .filter-modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 30px;
            border-radius: 15px;
            width: 80%;
            max-width: 600px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            position: relative;
        }

        .filter-modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f0f0f0;
        }

        .filter-modal-header h2 {
            color: #333;
            margin: 0;
            font-size: 1.5rem;
        }

        .close-btn {
            color: #999;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            border: none;
            background: none;
            padding: 0;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .close-btn:hover {
            color: #333;
            background: #f0f0f0;
        }

        .filter-add-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 25px;
        }

        .filter-add-section h3 {
            margin: 0 0 15px 0;
            color: #555;
            font-size: 1.1rem;
        }

        .filter-input-group {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .filter-input {
            flex: 1;
            padding: 10px 15px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        .filter-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .add-filter-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .add-filter-btn:hover {
            background: #218838;
            transform: translateY(-1px);
        }

        .filter-list {
            max-height: 300px;
            overflow-y: auto;
        }

        .filter-list h3 {
            margin: 0 0 15px 0;
            color: #555;
            font-size: 1.1rem;
        }

        .filter-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 15px;
            background: white;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            margin-bottom: 8px;
            transition: all 0.3s ease;
        }

        .filter-item:hover {
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            transform: translateX(3px);
        }

        .filter-text {
            flex: 1;
            font-family: monospace;
            background: #f8f9fa;
            padding: 5px 8px;
            border-radius: 4px;
            font-size: 13px;
            border: 1px solid #e9ecef;
        }

        .filter-actions {
            display: flex;
            gap: 8px;
        }

        .edit-filter-btn, .delete-filter-btn {
            padding: 6px 12px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
            font-weight: 500;
            transition: all 0.2s ease;
        }

        .edit-filter-btn {
            background: #ffc107;
            color: #212529;
        }

        .edit-filter-btn:hover {
            background: #e0a800;
        }

        .delete-filter-btn {
            background: #dc3545;
            color: white;
        }

        .delete-filter-btn:hover {
            background: #c82333;
        }

        .filter-stats {
            background: #e9ecef;
            padding: 15px;
            border-radius: 8px;
            margin-top: 20px;
            text-align: center;
            font-size: 14px;
            color: #495057;
        }

        .no-filters-message {
            text-align: center;
            padding: 30px;
            color: #6c757d;
            font-style: italic;
        }

        .import-drop-btn {
            position: relative;
            transition: all 0.3s ease;
        }

        .import-drop-btn.drag-over {
            background: linear-gradient(135deg, #28a745, #20c997);
            transform: scale(1.05);
            box-shadow: 0 8px 25px rgba(40, 167, 69, 0.6);
        }

        .import-drop-btn::after {
            content: "Click or drag .msg files here";
            position: absolute;
            bottom: -25px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 10px;
            white-space: nowrap;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
            pointer-events: none;
        }

        .import-drop-btn:hover::after {
            opacity: 1;
            visibility: visible;
        }

        .kanban-board {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 20px;
            margin-top: 20px;
            height: 600px;
        }

        .kanban-column {
            background: rgba(255, 255, 255, 0.9);
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
        }

        .kanban-header {
            text-align: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 2px solid #f0f0f0;
        }

        .kanban-title {
            font-size: 18px;
            font-weight: 600;
            color: #333;
            margin-bottom: 5px;
        }

        .kanban-count {
            font-size: 12px;
            color: #666;
            background: #f8f9fa;
            padding: 4px 8px;
            border-radius: 12px;
            display: inline-block;
        }

        .kanban-content {
            flex: 1;
            overflow-y: auto;
            padding-right: 5px;
        }

        .kanban-content::-webkit-scrollbar {
            width: 6px;
        }

        .kanban-content::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 3px;
        }

        .kanban-content::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 3px;
        }

        .kanban-content::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }

        .kanban-item {
            background: white;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            cursor: move;
            transition: all 0.3s ease;
            border-left: 4px solid #e0e0e0;
        }

        .kanban-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .kanban-item.dragging {
            opacity: 0.5;
            transform: rotate(5deg);
        }

        .kanban-item.priority-high {
            border-left-color: #dc3545;
        }

        .kanban-item.priority-medium {
            border-left-color: #ffc107;
        }

        .kanban-item.priority-low {
            border-left-color: #28a745;
        }

        .kanban-column.drag-over {
            background: rgba(102, 126, 234, 0.1);
            border: 2px dashed #667eea;
        }

        .kanban-task-text {
            font-weight: 500;
            margin-bottom: 8px;
            line-height: 1.4;
        }

        .kanban-task-meta {
            font-size: 12px;
            color: #666;
            margin-bottom: 10px;
        }

        .kanban-task-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .kanban-checkbox {
            transform: scale(1.2);
            cursor: pointer;
        }

        .kanban-priority {
            padding: 4px 8px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 11px;
            background: white;
            cursor: pointer;
        }

        .kanban-comments {
            margin-top: 10px;
            border-top: 1px solid #eee;
            padding-top: 10px;
        }

        .kanban-comments-label {
            font-size: 11px;
            color: #666;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .kanban-comments-textarea {
            width: 100%;
            min-height: 60px;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 12px;
            font-family: inherit;
            resize: vertical;
            background: #fafafa;
            transition: all 0.2s ease;
        }

        .kanban-comments-textarea:focus {
            outline: none;
            border-color: #667eea;
            background: white;
            box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.1);
        }

        .kanban-comments-textarea::placeholder {
            color: #999;
            font-style: italic;
        }

        /* Completed action styling for Dashboard and Timeline */
        .action-item.completed .action-text,
        .timeline-actions-list li.completed {
            text-decoration: line-through !important;
            opacity: 0.6 !important;
            color: #666 !important;
            background-color: #f8f9fa !important;
        }

        .action-item.completed .action-meta {
            opacity: 0.6 !important;
            color: #666 !important;
        }

        .action-item.completed {
            border-left-color: #6c757d !important;
        }

        /* Search bar styling */
        .search-group {
            display: flex;
            flex-direction: column;
            margin-left: auto;
        }

        .search-input {
            padding: 8px 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 14px;
            width: 250px;
            transition: all 0.3s ease;
            background: white;
        }

        .search-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .search-input::placeholder {
            color: #999;
            font-style: italic;
        }

        .filters {
            display: flex;
            align-items: flex-end;
            gap: 20px;
            margin-bottom: 30px;
        }

        .pending-column .kanban-header {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-radius: 8px;
            padding: 10px;
            border-bottom: none;
        }

        .progress-column .kanban-header {
            background: linear-gradient(135deg, #ffc107, #ff8c00);
            color: white;
            border-radius: 8px;
            padding: 10px;
            border-bottom: none;
        }

        .completed-column .kanban-header {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            border-radius: 8px;
            padding: 10px;
            border-bottom: none;
        }

        .pending-column .kanban-count,
        .progress-column .kanban-count,
        .completed-column .kanban-count {
            background: rgba(255, 255, 255, 0.2);
            color: white;
        }
    </style>

    <!-- Order matters: DataStream.js must be loaded before msgreader.js -->
	<script src="DataStream.js"></script>
	<script src="msgreader.js"></script>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>AI Outlook Inbox Organizer</h1>
            <div class="language-toggle">
                <span class="lang-label">Content Language:</span>
                <div class="toggle-switch" id="languageToggle">
                    <input type="checkbox" id="langSwitch" />
                    <div class="toggle-container">
                        <div class="toggle-labels">
                            <span class="toggle-label-text en-label">EN</span>
                            <span class="toggle-label-text es-label">ES</span>
                        </div>
                        <label for="langSwitch" class="toggle-label"></label>
                    </div>
                </div>
            </div>
        </div>

        <div class="connect-section">
            <div class="connect-left">
                <button class="btn">Connect to Outlook</button>
                <span class="status">Status: Disconnected</span>
            </div>
            <div class="connect-right">
                <div class="import-btn-wrapper">
                    <input type="file" id="emailFileInput" multiple accept=".msg" style="display:none" />
                    <button class="btn import-drop-btn" id="importButton" onclick="document.getElementById('emailFileInput').click()">Import .MSG Emails</button>
                </div>
                <button class="gear-btn" onclick="openFilterModal()">
                    <i class="fas fa-cog"></i>
                </button>
            </div>
        </div>

        <div class="tabs">
            <button class="tab active" onclick="showTab('dashboard')">Dashboard</button>
            <button class="tab" onclick="showTab('timeline')">Project Timeline</button>
            <button class="tab" onclick="showTab('actions')">My Actions</button>
            <button class="tab" onclick="showTab('attachments')">Attachments</button>
        </div>

        <div id="dashboard" class="tab-content">
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number" id="totalEmails">0</div>
                    <div class="stat-label">Total Emails</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="activeProjects">0</div>
                    <div class="stat-label">Active Projects</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="pendingActions">0</div>
                    <div class="stat-label">Pending Actions</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="completedActions">0</div>
                    <div class="stat-label">Completed Actions</div>
                </div>
            </div>

            <div class="filters">
                <div class="filter-group">
                    <label>Project/Topic</label>
                    <select id="projectFilter" onchange="filterEmails()">
                        <option value="">All Projects</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>Sender</label>
                    <select id="senderFilter" onchange="filterEmails()">
                        <option value="">All Senders</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>Has Actions</label>
                    <select id="actionFilter" onchange="filterEmails()">
                        <option value="">All</option>
                        <option value="true">Has Actions</option>
                        <option value="false">No Actions</option>
                    </select>
                </div>
                <div class="search-group">
                    <label>Search</label>
                    <input type="text" id="searchInput" class="search-input" 
                           placeholder="Search emails by subject, sender, or content..." 
                           oninput="filterEmails()" />
                </div>
            </div>

            <div class="email-grid" id="emailGrid">
                <div class="loading">Loading emails...</div>
            </div>
        </div>

        <div id="timeline" class="tab-content hidden">
            <div class="filters">
                <div class="filter-group">
                    <label>Select Project</label>
                    <select id="timelineProjectFilter" onchange="loadTimeline()">
                        <option value="">Choose a project</option>
                    </select>
                </div>
            </div>
            <div class="timeline" id="timelineContainer">
                <p>Select a project to view its timeline</p>
            </div>
        </div>

        <div id="actions" class="tab-content hidden">
            <div class="filters">
                <div class="filter-group">
                    <label>Sort by</label>
                    <select id="actionSortFilter" onchange="sortActions()">
                        <option value="dueDate">Due Date</option>
                        <option value="priority">Priority</option>
                        <option value="project">Project</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>Priority</label>
                    <select id="priorityFilter" onchange="filterActions()">
                        <option value="">All Priorities</option>
                        <option value="high">High Priority</option>
                        <option value="medium">Medium Priority</option>
                        <option value="low">Low Priority</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>Status</label>
                    <select id="statusFilter" onchange="filterActions()">
                        <option value="">All Tasks</option>
                        <option value="pending">Pending</option>
                        <option value="completed">Completed</option>
                    </select>
                </div>
            </div>
            <div class="progress-bar">
                <div class="progress-fill" id="progressFill" style="width: 0%"></div>
            </div>
            <p id="progressText">0% complete (0 of 0 tasks)</p>
            <div class="kanban-board" id="kanbanBoard">
                <div class="kanban-column pending-column" id="pendingColumn">
                    <div class="kanban-header">
                        <div class="kanban-title">Pending</div>
                        <div class="kanban-count" id="pendingCount">0 tasks</div>
                    </div>
                    <div class="kanban-content" id="pendingContent">
                        <!-- Pending tasks will be added here -->
                    </div>
                </div>
                
                <div class="kanban-column progress-column" id="progressColumn">
                    <div class="kanban-header">
                        <div class="kanban-title">In Progress</div>
                        <div class="kanban-count" id="progressCount">0 tasks</div>
                    </div>
                    <div class="kanban-content" id="progressContent">
                        <!-- In progress tasks will be added here -->
                    </div>
                </div>
                
                <div class="kanban-column completed-column" id="completedColumn">
                    <div class="kanban-header">
                        <div class="kanban-title">Completed Today</div>
                        <div class="kanban-count" id="completedCount">0 tasks</div>
                    </div>
                    <div class="kanban-content" id="completedContent">
                        <!-- Completed tasks will be added here -->
                    </div>
                </div>
            </div>
        </div>

        <div id="attachments" class="tab-content hidden">
            <div class="filters">
                <div class="filter-group">
                    <label>File Type</label>
                    <select id="fileTypeFilter" onchange="filterAttachments()">
                        <option value="">All Types</option>
                        <option value="pdf">PDF</option>
                        <option value="doc">Documents</option>
                        <option value="xls">Spreadsheets</option>
                        <option value="img">Images</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label>Project</label>
                    <select id="attachmentProjectFilter" onchange="filterAttachments()">
                        <option value="">All Projects</option>
                    </select>
                </div>
            </div>
            <table class="attachments-table" id="attachmentsTable">
                <thead>
                    <tr>
                        <th>File Name</th>
                        <th>Project</th>
                        <th>Email Subject</th>
                        <th>Date</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody id="attachmentsTableBody">
                    <tr>
                        <td colspan="5" style="text-align: center; padding: 40px;">Loading attachments...</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Filter Modal -->
    <div id="filterModal" class="filter-modal">
        <div class="filter-modal-content">
            <div class="filter-modal-header">
                <h2>Email Filter Rules</h2>
                <button class="close-btn" onclick="closeFilterModal()">&times;</button>
            </div>
            <div class="filter-add-section">
                <h3>Add New Filter Rule</h3>
                <div class="filter-input-group">
                    <input type="text" id="newFilterInput" class="filter-input" placeholder="Enter filter rule (e.g., sender:spam@example.com)">
                    <button class="add-filter-btn" onclick="addFilterRule()">Add Rule</button>
                </div>
            </div>
            <div class="filter-list">
                <h3>Active Filter Rules</h3>
                <div id="filterRulesList">
                    <!-- Filter rules will be added here -->
                </div>
            </div>
            <div class="filter-stats">
                <span id="filterStats">No filters active</span>
            </div>
        </div>
    </div>

    <script>
        // Global state
        let emails = [];
        let actions = [];
        let attachments = [];
        let projects = new Set();
        let senders = new Set();
        let isConnected = false;

        // Global language setting
        let currentLanguage = 'original'; // 'original', 'en', 'es'

        // Utility function to clear all state
        function clearState() {
            emails = [];
            actions = [];
            attachments = [];
            projects = new Set();
            senders = new Set();
        }

        // Initialize the app
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize drag and drop for import button
            initializeImportButtonDragDrop();
            
            // Initialize language toggle
            initializeLanguageToggle();
            
            // Try loading saved data first
            const savedEmails = JSON.parse(localStorage.getItem('emails') || '[]');
            if (savedEmails.length) {
                clearState(); 
                emails = savedEmails;
                // Re-populate actions, attachments, projects, senders from loaded emails
                emails.forEach(email => {
                    projects.add(email.project);
                    senders.add(email.sender);
                    (email.attachments || []).forEach(attachmentName => { // Use attachmentName for consistency
                        attachments.push({
                            name: attachmentName, // Directly use the name from the email's attachments array
                            project: email.project,
                            emailSubject: email.subject,
                            date: email.date,
                            emailId: email.id
                        });
                    });
                    (email.actions || []).forEach(action => {
                        console.log('Processing action:', action);
                        if (action.isMyAction) {
                            // Ensure backward compatibility for existing data
                            let status = action.status || 'pending';
                            if (!action.status && action.completed) {
                                status = 'completed';
                            }
                            
                            const processedAction = {
                                ...action,
                                emailId: email.id,
                                emailSubject: email.subject,
                                completed: action.completed || false,
                                priority: action.priority || 'medium',
                                status: status,
                                completedDate: action.completedDate || null
                            };
                            
                            console.log('Adding action to actions array:', processedAction);
                            actions.push(processedAction);
                        } else {
                            console.log('Skipping action (not isMyAction):', action);
                        }
                    });
                });
                console.log('Final actions array before rendering:', actions);
                populateFilters();
                renderEmails();
                console.log('About to call renderActions...');
                renderActions();
                renderAttachments();
                updateStats();
            } else {
                // No saved data — use sample/demo data if you want, or just start empty
                clearState(); // Ensure a clean slate
                loadSampleData(); // Keep this for initial demo if no files are uploaded
            }
        });

        // Initialize drag and drop for import button
        function initializeImportButtonDragDrop() {
            const importButton = document.getElementById('importButton');
            const emailFileInput = document.getElementById('emailFileInput');

            // Prevent default drag behaviors
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                importButton.addEventListener(eventName, preventDefaults, false);
                document.body.addEventListener(eventName, preventDefaults, false);
            });

            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }

            // Highlight drop area when item is dragged over it
            ['dragenter', 'dragover'].forEach(eventName => {
                importButton.addEventListener(eventName, highlight, false);
            });

            ['dragleave', 'drop'].forEach(eventName => {
                importButton.addEventListener(eventName, unhighlight, false);
            });

            function highlight(e) {
                importButton.classList.add('drag-over');
            }

            function unhighlight(e) {
                importButton.classList.remove('drag-over');
            }

            // Handle dropped files
            importButton.addEventListener('drop', handleDrop, false);

            function handleDrop(e) {
                const dt = e.dataTransfer;
                const files = dt.files;
                handleFiles(files);
            }

            // Handle file input change
            emailFileInput.addEventListener('change', function(e) {
                handleFiles(this.files);
            });
        }

        // Outlook connection (placeholder for actual API integration)
        async function connectOutlook() {
            const btn = event.target;
            const status = document.getElementById('connectionStatus');
            
            btn.textContent = 'Connecting...';
            btn.disabled = true;

            // Simulate API connection
            setTimeout(() => {
                isConnected = true;
                btn.textContent = 'Connected';
                status.textContent = 'Connected';
                status.className = 'status connected';
                
                // In a real app, this would trigger fetching emails
                // For this local app, connection simply changes status
            }, 2000);
        }

        // Load sample data for demonstration (only if no files are loaded)
        function loadSampleData() {
            clearState(); // Ensure a clean state when loading sample data
            emails = [
                {
                    id: 1,
                    subject: "Project Alpha Milestone Review",
                    sender: "john.doe@company.com",
                    date: "2025-06-05",
                    project: "Project Alpha",
                    summary: "Review of Q2 milestones completed. Next phase planning scheduled for next week.",
                    actions: [
                        {
                            text: "Prepare presentation for stakeholder meeting",
                            responsible: "me",
                            dueDate: "2025-06-10",
                            isMyAction: true,
                            priority: 'high'
                        },
                        {
                            text: "Update project timeline",
                            responsible: "John Doe",
                            dueDate: "2025-06-08",
                            isMyAction: false,
                            priority: 'medium'
                        }
                    ],
                    attachments: ["milestone_report.pdf", "project_timeline.xlsx"]
                },
                {
                    id: 2,
                    subject: "Marketing Campaign Feedback",
                    sender: "sarah.wilson@company.com",
                    date: "2025-06-04",
                    project: "Marketing Campaign",
                    summary: "Positive feedback on initial campaign concepts. Request for budget adjustment and timeline extension.",
                    actions: [
                        {
                            text: "Review budget proposal",
                            responsible: "me",
                            dueDate: "2025-06-07",
                            isMyAction: true,
                            priority: 'high'
                        }
                    ],
                    attachments: ["campaign_concepts.pptx", "budget_breakdown.pdf"]
                },
                {
                    id: 3,
                    subject: "Technical Architecture Discussion",
                    sender: "mike.chen@company.com",
                    date: "2025-06-03",
                    project: "Project Alpha",
                    summary: "Discussion on database architecture choices. Need decision on NoSQL vs SQL approach.",
                    actions: [
                        {
                            text: "Research database performance benchmarks",
                            responsible: "Mike Chen",
                            dueDate: "2025-06-09",
                            isMyAction: false,
                            priority: 'low'
                        }
                    ],
                    attachments: ["architecture_diagram.png"]
                }
            ];

            // Extract projects and senders from sample data
            emails.forEach(email => {
                projects.add(email.project);
                senders.add(email.sender);
                email.actions.forEach(action => {
                    console.log('Sample data - Processing action:', action);
                    if (action.isMyAction) {
                        const processedAction = {
                            ...action,
                            emailId: email.id,
                            emailSubject: email.subject,
                            completed: action.completed || false,
                            priority: action.priority || 'medium',
                            status: action.status || 'pending',
                            completedDate: action.completedDate || null
                        };
                        console.log('Sample data - Adding action:', processedAction);
                        actions.push(processedAction);
                    } else {
                        console.log('Sample data - Skipping action (not isMyAction):', action);
                    }
                });
            });

            // Create attachments list from sample data
            emails.forEach(email => {
                email.attachments.forEach(attachment => {
                    attachments.push({
                        name: attachment,
                        project: email.project,
                        emailSubject: email.subject,
                        date: email.date,
                        emailId: email.id
                    });
                });
            });

            console.log('Sample data - Final actions array:', actions);
            populateFilters();
            renderEmails();
            console.log('Sample data - About to call renderActions...');
            renderActions();
            renderAttachments();
            updateStats();
        }

        // Populate filter dropdowns
        function populateFilters() {
            const projectFilter = document.getElementById('projectFilter');
            const senderFilter = document.getElementById('senderFilter');
            const timelineProjectFilter = document.getElementById('timelineProjectFilter');
            const attachmentProjectFilter = document.getElementById('attachmentProjectFilter');

            // Clear existing options
            projectFilter.innerHTML = '<option value="">All Projects</option>';
            senderFilter.innerHTML = '<option value="">All Senders</option>';
            timelineProjectFilter.innerHTML = '<option value="">Choose a project</option>';
            attachmentProjectFilter.innerHTML = '<option value="">All Projects</option>';

            // Add project options
            // Sort projects alphabetically for better UX
            Array.from(projects).sort().forEach(project => {
                projectFilter.innerHTML += `<option value="${project}">${project}</option>`;
                timelineProjectFilter.innerHTML += `<option value="${project}">${project}</option>`;
                attachmentProjectFilter.innerHTML += `<option value="${project}">${project}</option>`;
            });

            // Add sender options
            Array.from(senders).sort().forEach(sender => {
                senderFilter.innerHTML += `<option value="${sender}">${sender}</option>`;
            });
        }

        // Render emails in dashboard
        function renderEmails() {
            const grid = document.getElementById('emailGrid');
            
            // Apply current filters before rendering
            const currentProjectFilter = document.getElementById('projectFilter')?.value || '';
            const currentSenderFilter = document.getElementById('senderFilter')?.value || '';
            const currentActionFilter = document.getElementById('actionFilter')?.value || ''; // "true", "false", or ""
            const searchQuery = document.getElementById('searchInput')?.value.toLowerCase() || '';

            const filteredEmails = emails.filter(email => {
                const matchesProject = !currentProjectFilter || email.project === currentProjectFilter;
                const matchesSender = !currentSenderFilter || email.sender === currentSenderFilter;
                const matchesActions = currentActionFilter === "" || 
                                       (currentActionFilter === "true" && email.actions.length > 0) ||
                                       (currentActionFilter === "false" && email.actions.length === 0);
                
                // Search functionality - use display content (translated or original)
                const displayContent = getEmailDisplayContent(email);
                const matchesSearch = !searchQuery || 
                    displayContent.subject.toLowerCase().includes(searchQuery) ||
                    email.sender.toLowerCase().includes(searchQuery) ||
                    displayContent.summary.toLowerCase().includes(searchQuery) ||
                    email.project.toLowerCase().includes(searchQuery) ||
                    displayContent.actions.some(action => 
                        action.text.toLowerCase().includes(searchQuery) ||
                        action.responsible.toLowerCase().includes(searchQuery)
                    );
                
                return matchesProject && matchesSender && matchesActions && matchesSearch;
            });

            if (filteredEmails.length === 0) {
                const searchQuery = document.getElementById('searchInput')?.value || '';
                const message = searchQuery ? 
                    `No emails found matching search "${searchQuery}" and current filters.` : 
                    'No emails found matching current filters.';
                grid.innerHTML = `<div class="loading">${message}</div>`;
                return;
            }

            grid.innerHTML = filteredEmails.map(email => {
                const displayContent = getEmailDisplayContent(email);
                return `
                <div class="email-card">
                    <div class="email-header">
                        <div>
                            <div class="email-subject">${displayContent.subject}</div>
                            <div class="email-meta">
                                <span>From: ${email.sender}</span>
                                <span>Date: ${email.date}</span>
                                <span class="project-tag" onclick="editProjectTag(${email.id})" data-email-id="${email.id}">
                                    ${email.project}
                                    <div class="project-editor" id="editor-${email.id}">
                                        <label class="input-label" for="input-${email.id}">New Project Name:</label>
                                        <input type="text" id="input-${email.id}" value="${email.project}" placeholder="Enter project name">
                                        
                                        <div class="existing-projects">
                                            <span class="existing-projects-label">Or select existing:</span>
                                            <div class="project-buttons">
                                                ${Array.from(projects).map(p => `<button class="project-btn" onclick="document.getElementById('input-${email.id}').value = '${p}';">${p}</button>`).join('')}
                                            </div>
                                        </div>

                                        <div class="control-buttons">
                                            <button class="save-btn" onclick="saveProjectTag(${email.id})">Save</button>
                                            <button class="cancel-btn" onclick="cancelProjectEdit(${email.id})">Cancel</button>
                                        </div>
                                    </div>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="summary">${displayContent.summary}</div>
                    ${displayContent.actions.length > 0 ? `
                        <div class="actions">
                            <strong>Actions:</strong>
                            ${displayContent.actions.map(action => {
                                const isCompleted = isActionCompleted(action.text, action.responsible, action.dueDate, email.id);
                                return `
                                <div class="action-item ${action.isMyAction ? 'my-action' : ''} ${isCompleted ? 'completed' : ''}">
                                    <div class="action-text">${action.text}</div>
                                    <div class="action-meta">
                                        <div>Responsible: ${action.responsible}</div>
                                        <div>Due: ${action.dueDate}</div>
                                        <div>Priority: <span class="priority-${action.priority}">${action.priority.charAt(0).toUpperCase() + action.priority.slice(1)}</span></div>
                                    </div>
                                </div>
                                `;
                            }).join('')}
                        </div>
                    ` : ''}
                </div>
                `;
            }).join('');
        }

        // Render actions Kanban board
        function renderActions() {
            console.log('renderActions called, total actions:', actions.length);
            
            // Initialize Kanban drag and drop
            initializeKanbanDragDrop();
            
            // Apply current filters only to pending actions
            const priorityFilter = document.getElementById('priorityFilter')?.value || '';
            const statusFilter = document.getElementById('statusFilter')?.value || '';

            // Separate actions by status
            const pendingActions = actions.filter(action => action.status === 'pending');
            const progressActions = actions.filter(action => action.status === 'progress');
            const completedActions = actions.filter(action => action.status === 'completed' && isCompletedToday(action));
            
            console.log('Actions by status:', {
                pending: pendingActions.length,
                progress: progressActions.length,
                completed: completedActions.length
            });

            // Apply filters only to pending actions
            let filteredPendingActions = [...pendingActions];
            
            if (priorityFilter) {
                filteredPendingActions = filteredPendingActions.filter(action => action.priority === priorityFilter);
            }

            if (statusFilter === 'pending') {
                filteredPendingActions = filteredPendingActions.filter(action => !action.completed);
            } else if (statusFilter === 'completed') {
                filteredPendingActions = []; // Hide pending if showing only completed
            }

            // Sort pending actions
            const sortBy = document.getElementById('actionSortFilter')?.value || 'dueDate';
            filteredPendingActions.sort((a, b) => compareActions(a, b, sortBy));

            // Render each column
            renderKanbanColumn('pendingContent', 'pendingCount', filteredPendingActions, 'pending');
            renderKanbanColumn('progressContent', 'progressCount', progressActions, 'progress');
            renderKanbanColumn('completedContent', 'completedCount', completedActions, 'completed');

            updateProgress();
        }

        // Helper function to check if action was completed today
        function isCompletedToday(action) {
            if (!action.completedDate) return false;
            const today = new Date().toDateString();
            const completedDate = new Date(action.completedDate).toDateString();
            return today === completedDate;
        }

        // Sort actions comparator helper
        function compareActions(a, b, sortBy) {
            if (sortBy === 'priority') {
                const priorityOrder = { high: 3, medium: 2, low: 1 };
                return priorityOrder[b.priority] - priorityOrder[a.priority];
            } else if (sortBy === 'dueDate') {
                const dateA = a.dueDate ? new Date(a.dueDate) : new Date('9999-12-31');
                const dateB = b.dueDate ? new Date(b.dueDate) : new Date('9999-12-31');
                return dateA - dateB;
            } else if (sortBy === 'project') {
                const projectA = emails.find(e => e.id === a.emailId)?.project || '';
                const projectB = emails.find(e => e.id === b.emailId)?.project || '';
                return projectA.localeCompare(projectB);
            }
            return 0;
        }

        // Render individual Kanban column
        function renderKanbanColumn(contentId, countId, actionsList, status) {
            console.log(`Rendering column ${contentId} with ${actionsList.length} actions:`, actionsList);
            
            const content = document.getElementById(contentId);
            const count = document.getElementById(countId);
            
            if (!content) {
                console.error(`Element with id ${contentId} not found!`);
                return;
            }
            
            count.textContent = `${actionsList.length} task${actionsList.length !== 1 ? 's' : ''}`;

            if (actionsList.length === 0) {
                content.innerHTML = '<div style="text-align: center; color: #999; padding: 20px;">No tasks</div>';
                return;
            }

            content.innerHTML = actionsList.map((action, index) => {
                const originalIndex = actions.findIndex(a => a.emailId === action.emailId && a.text === action.text);
                
                // Get translated content for the action
                const email = emails.find(e => e.id === action.emailId);
                const displayContent = email ? getEmailDisplayContent(email) : null;
                const translatedAction = displayContent ? 
                    displayContent.actions.find(a => a.text === action.text || (currentLanguage !== 'original' && a.responsible === action.responsible && a.dueDate === action.dueDate)) : 
                    null;
                
                const actionText = translatedAction ? translatedAction.text : action.text;
                const emailSubject = displayContent ? displayContent.subject : action.emailSubject;
                
                return `
                <div class="kanban-item priority-${action.priority}" 
                     draggable="true" 
                     data-action-index="${originalIndex}"
                     data-status="${status}">
                    <div class="kanban-task-text">${actionText}</div>
                    <div class="kanban-task-meta">
                        From: ${emailSubject}<br>
                        Due: ${action.dueDate || 'N/A'}
                    </div>
                    <div class="kanban-task-controls">
                        <input type="checkbox" class="kanban-checkbox" 
                               ${action.completed ? 'checked' : ''} 
                               onchange="toggleActionStatus(${originalIndex})">
                        <select class="kanban-priority" 
                                onchange="changePriority(${originalIndex}, this.value)">
                            <option value="high" ${action.priority === 'high' ? 'selected' : ''}>High</option>
                            <option value="medium" ${action.priority === 'medium' ? 'selected' : ''}>Medium</option>
                            <option value="low" ${action.priority === 'low' ? 'selected' : ''}>Low</option>
                        </select>
                    </div>
                    <div class="kanban-comments">
                        <div class="kanban-comments-label">Notes:</div>
                        <textarea class="kanban-comments-textarea" 
                                  placeholder="Add notes about what needs to be done or what has been completed..."
                                  onchange="updateActionComments(${originalIndex}, this.value)"
                                  onblur="updateActionComments(${originalIndex}, this.value)">${action.comments || ''}</textarea>
                    </div>
                </div>
                `;
            }).join('');
        }

        // Toggle action completion
        function toggleAction(index) {
            if (actions[index]) { // Ensure action exists
                actions[index].completed = !actions[index].completed;
                localStorage.setItem('emails', JSON.stringify(emails)); // Save changes
                renderActions();
                updateStats(); // Update stats after action change
                // Refresh other tabs to show updated completion status
                renderEmails(); // Refresh Dashboard
                loadTimeline(); // Refresh Timeline
            }
        }

        // Change action priority
        function changePriority(index, newPriority) {
            if (actions[index]) { // Ensure action exists
                actions[index].priority = newPriority;
                localStorage.setItem('emails', JSON.stringify(emails)); // Save changes
                renderActions();
            }
        }

        // Update action comments
        function updateActionComments(index, comments) {
            if (actions[index]) { // Ensure action exists
                actions[index].comments = comments;
                localStorage.setItem('emails', JSON.stringify(emails)); // Save changes
                // No need to re-render for comments, just save
            }
        }

        // Helper function to check if an action is completed based on current Kanban status
        function isActionCompleted(actionText, responsible, dueDate, emailId) {
            // Find the action in the global actions array by matching key properties
            // First try exact text match
            let matchingAction = actions.find(action => 
                action.text === actionText && 
                action.responsible === responsible && 
                action.dueDate === dueDate &&
                action.emailId === emailId
            );
            
            // If no exact match found, try matching by responsible, dueDate, and emailId only
            // (in case the text is translated but the action properties are the same)
            if (!matchingAction) {
                const candidateActions = actions.filter(action => 
                    action.responsible === responsible && 
                    action.dueDate === dueDate &&
                    action.emailId === emailId
                );
                
                // If there's only one candidate, it's likely the same action with different text (translation)
                if (candidateActions.length === 1) {
                    matchingAction = candidateActions[0];
                }
            }
            
            // Debug logging
            if (!matchingAction) {
                console.log('No matching action found for:', {
                    actionText,
                    responsible,
                    dueDate,
                    emailId,
                    availableActions: actions.filter(a => a.emailId === emailId)
                });
            } else {
                console.log('Found matching action:', matchingAction, 'Completed:', matchingAction.status === 'completed' || matchingAction.completed);
            }
            
            return matchingAction && (matchingAction.status === 'completed' || matchingAction.completed);
        }

        // Sort actions (triggered by sort dropdown change)
        function sortActions() {
            renderActions();
        }

        // Filter actions
        function filterActions() {
            renderActions(); // Re-render applies filters
        }

        // Update progress bar
        function updateProgress() {
            const myActions = actions.filter(a => a.isMyAction);
            const completedCount = myActions.filter(action => action.completed).length;
            const totalCount = myActions.length;
            const percentage = totalCount > 0 ? Math.round((completedCount / totalCount) * 100) : 0;

            document.getElementById('progressFill').style.width = percentage + '%';
            document.getElementById('progressText').textContent = 
                `${percentage}% complete (${completedCount} of ${totalCount} tasks)`;
        }

        // Update statistics
        function updateStats() {
            document.getElementById('totalEmails').textContent = emails.length;
            document.getElementById('activeProjects').textContent = projects.size;
            document.getElementById('pendingActions').textContent = actions.filter(a => !a.completed && a.isMyAction).length;
            document.getElementById('completedActions').textContent = actions.filter(a => a.completed && a.isMyAction).length;
        }

        // Filter emails (re-renders the grid with current filter selections)
        function filterEmails() {
            renderEmails();
        }

       // Load timeline for selected project
    function loadTimeline() {
        const selectedProject = document.getElementById('timelineProjectFilter').value;
        const container = document.getElementById('timelineContainer');

        if (!selectedProject) {
            container.innerHTML = '<p>Select a project to view its timeline</p>';
            return;
        }

        const projectEmails = emails.filter(email => email.project === selectedProject)
                                    .sort((a, b) => new Date(b.date) - new Date(a.date)); // Sort descending by date

        if (projectEmails.length === 0) {
            container.innerHTML = `<p>No emails found for project "${selectedProject}".</p>`;
            return;
        }

        // --- Generate General Project Summary ---
        let combinedSummaries = [];
        let projectActions = [];
        let projectSubjects = [];

        projectEmails.forEach(email => {
            const displayContent = getEmailDisplayContent(email);
            if (displayContent.summary) combinedSummaries.push(displayContent.summary);
            if (displayContent.subject) projectSubjects.push(displayContent.subject);
            (displayContent.actions || []).forEach(action => {
                projectActions.push({
                    ...action,
                    emailDate: email.date // Add email date to action for sorting
                });
            });
        });

        // a) What is the project about
        // Simple heuristic: Take the first few distinct sentences from summaries or relevant subjects.
        const projectAbout = combinedSummaries.length > 0 ? combinedSummaries.join(' ').substring(0, 300) + '...' : 'No detailed summary available.';
        const uniqueSubjects = [...new Set(projectSubjects)].slice(0, 5); // Take up to 5 unique subjects

        // b) Most important achievements / Key Discussion Points
        // Without explicit "achievements" in data, use key subjects/themes as a proxy for discussion points
        const achievementsHtml = uniqueSubjects.length > 0 ?
            `<ul>${uniqueSubjects.map(s => `<li>${s}</li>`).join('')}</ul>` :
            'No specific achievements identified yet (based on email subjects).';

        // c) Latest request/pending action
        const pendingActions = projectActions.filter(action => !action.completed && action.isMyAction)
                                             .sort((a, b) => new Date(b.dueDate || b.emailDate) - new Date(a.dueDate || a.emailDate));
        const latestPendingAction = pendingActions.length > 0 ? 
            `${pendingActions[0].text} (Due: ${pendingActions[0].dueDate || 'N/A'}, Responsible: ${pendingActions[0].responsible})` :
            'No pending actions currently identified for this project.';

        let projectSummaryHtml = `
            <div class="project-overall-summary">
                <h3>Overall Project Summary: ${selectedProject}</h3>
                <p><strong>What is the project about:</strong> ${projectAbout}</p>
                <p><strong>Key Discussion Points/Milestones:</strong></p>
                ${achievementsHtml}
                <p><strong>Latest Request/Pending Action:</strong> ${latestPendingAction}</p>
            </div>
        `;
        // --- End General Project Summary ---


        container.innerHTML = projectSummaryHtml + projectEmails.map(email => {
            const displayContent = getEmailDisplayContent(email);
            return `
            <div class="timeline-item">
                <div class="timeline-dot"></div>
                <div class="timeline-content">
                    <div class="timeline-date-time">
                        ${email.date ? new Date(email.date).toLocaleString() : 'Date N/A'}
                    </div>
                    <div class="timeline-cols">
                        <div class="timeline-col-left">
                            <strong>From:</strong> ${email.sender}<br>
                            <p>${displayContent.summary}</p>
                        </div>
                        <div class="timeline-col-right">
                            ${displayContent.actions && displayContent.actions.length > 0 ? `
                                <strong>Actions Generated:</strong>
                                <ul class="timeline-actions-list">
                                    ${displayContent.actions.map(action => {
                                        const isCompleted = isActionCompleted(action.text, action.responsible, action.dueDate, email.id);
                                        return `
                                        <li class="${isCompleted ? 'completed' : ''}">
                                            ${action.text} 
                                            <br><small>(Responsible: ${action.responsible || 'N/A'}, Due: ${action.dueDate || 'N/A'}, Priority: <span class="priority-${action.priority}">${action.priority || 'medium'}</span>)</small>
                                        </li>
                                        `;
                                    }).join('')}
                                </ul>
                            ` : 'No specific actions generated.'}
                        </div>
                    </div>
                </div>
            </div>
            `;
        }).join('');
    }

        // Tab navigation
        function showTab(tabName) {
            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.add('hidden');
            });

            // Remove active class from all tabs
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });

            // Show selected tab content
            document.getElementById(tabName).classList.remove('hidden');

            // Add active class to clicked tab
            // event.target might not always be the button, so let's be safer
            document.querySelector(`.tabs button[onclick="showTab('${tabName}')"]`).classList.add('active');

            // Re-render relevant content when switching tabs to apply filters/sorts
            if (tabName === 'dashboard') renderEmails();
            else if (tabName === 'timeline') loadTimeline();
            else if (tabName === 'actions') renderActions();
            else if (tabName === 'attachments') renderAttachments();
        }

        // Render attachments table
        function renderAttachments() {
            const tbody = document.getElementById('attachmentsTableBody');
            
            // Apply current filters
            const fileTypeFilter = document.getElementById('fileTypeFilter')?.value || '';
            const attachmentProjectFilter = document.getElementById('attachmentProjectFilter')?.value || '';

            const filteredAttachments = attachments.filter(attachment => {
                const matchesFileType = !fileTypeFilter || 
                                        (fileTypeFilter === 'pdf' && attachment.name.toLowerCase().endsWith('.pdf')) ||
                                        (fileTypeFilter === 'doc' && (attachment.name.toLowerCase().endsWith('.doc') || attachment.name.toLowerCase().endsWith('.docx'))) ||
                                        (fileTypeFilter === 'xls' && (attachment.name.toLowerCase().endsWith('.xls') || attachment.name.toLowerCase().endsWith('.xlsx'))) ||
                                        (fileTypeFilter === 'img' && (attachment.name.toLowerCase().endsWith('.jpg') || attachment.name.toLowerCase().endsWith('.jpeg') || attachment.name.toLowerCase().endsWith('.png') || attachment.name.toLowerCase().endsWith('.gif')));
                const matchesProject = !attachmentProjectFilter || attachment.project === attachmentProjectFilter;
                return matchesFileType && matchesProject;
            });


            if (filteredAttachments.length === 0) {
                tbody.innerHTML = '<tr><td colspan="5" style="text-align: center; padding: 40px;">No attachments found matching filters.</td></tr>';
                return;
            }

            tbody.innerHTML = filteredAttachments.map(attachment => {
                const fileExt = attachment.name.split('.').pop().toLowerCase();
                let fileIcon = '📄';
                
                if (['pdf'].includes(fileExt)) fileIcon = '📕';
                else if (['doc', 'docx'].includes(fileExt)) fileIcon = '📘';
                else if (['xls', 'xlsx'].includes(fileExt)) fileIcon = '📗';
                else if (['jpg', 'jpeg', 'png', 'gif'].includes(fileExt)) fileIcon = '🖼️';
                else if (['zip', 'rar'].includes(fileExt)) fileIcon = '📦';

                return `
                    <tr>
                        <td>
                            <span class="file-icon">${fileIcon}</span>
                            <span class="attachment-name">${attachment.name}</span>
                        </td>
                        <td>${attachment.project}</td>
                        <td>${attachment.emailSubject}</td>
                        <td>${attachment.date}</td>
                        <td>
                            <a href="#" class="attachment-link" onclick="downloadAttachment('${attachment.name}')">
                                Download
                            </a>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        // Download attachment (placeholder)
        function downloadAttachment(filename) {
            // Using a custom modal instead of alert()
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                background: rgba(0,0,0,0.5); display: flex; justify-content: center; align-items: center;
                z-index: 10000;
            `;
            modal.innerHTML = `
                <div style="background: white; padding: 25px; border-radius: 10px; box-shadow: 0 5px 15px rgba(0,0,0,0.3); text-align: center;">
                    <p style="font-size: 1.1em; margin-bottom: 20px;">Downloading ${filename}... (This is a placeholder action)</p>
                    <button onclick="this.parentNode.parentNode.remove()" style="background: #667eea; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer;">OK</button>
                </div>
            `;
            document.body.appendChild(modal);
            // In a real application, this would involve sending the attachment content.
            // For .msg attachments, you'd need the original blob to re-create the file.
        }

        // Project tag editing functions
        function editProjectTag(emailId) {
            // Close any other open editors
            document.querySelectorAll('.project-editor').forEach(editor => {
                editor.classList.remove('active');
            });
            
            const editor = document.getElementById(`editor-${emailId}`);
            editor.classList.add('active');
            
            // Focus on input
            const input = document.getElementById(`input-${emailId}`);
            if (input) { // Check if input exists
                input.focus();
                input.select();
            }
        }

        function saveProjectTag(emailId) {
            const input = document.getElementById(`input-${emailId}`);
            const newProject = input.value.trim();
            
            if (newProject) {
                // Find and update the email
                const email = emails.find(e => e.id === emailId);
                if (email) {
                    const oldProject = email.project; // Keep old project for potential cleanup
                    email.project = newProject;
                    
                    // Update projects set
                    projects.add(newProject);
                    // No need to remove oldProject from `projects` Set immediately, as other emails might still use it.
                    // The Set naturally cleans up if no other emails use an old project after all updates.
                    
                    // Update attachments associated with this email
                    attachments.forEach(att => {
                        if (att.emailId === emailId) {
                            att.project = newProject;
                        }
                    });

                    // Update actions associated with this email (if project is part of action data)
                    actions.forEach(action => {
                        if (action.emailId === emailId) {
                            // If action objects store project, update it here. Currently, they don't directly.
                            // The project is displayed in action meta, which relies on `emails` array.
                        }
                    });
                    
                    // Save to local storage after modification
                    localStorage.setItem('emails', JSON.stringify(emails));

                    // Re-render and update filters/stats
                    populateFilters();
                    renderEmails();
                    renderAttachments();
                    updateStats();
                }
            }
            
            cancelProjectEdit(emailId);
        }

        function cancelProjectEdit(emailId) {
            const editor = document.getElementById(`editor-${emailId}`);
            editor.classList.remove('active');
        }

        // Close project editors when clicking outside
        document.addEventListener('click', function(event) {
            // Check if the click was outside of any project-tag (and its editor)
            const clickedTag = event.target.closest('.project-tag');
            document.querySelectorAll('.project-editor.active').forEach(editor => {
                const emailId = editor.id.replace('editor-', '');
                const correspondingTag = document.querySelector(`.project-tag[data-email-id="${emailId}"]`);
                
                if (!clickedTag || !correspondingTag || !correspondingTag.contains(clickedTag)) {
                    // If clicked outside the current active editor's tag
                    editor.classList.remove('active');
                }
            });
        });


// --- DEEPSEEK Email Analysis Function ---

async function analyzeEmail(email) {
	
    const prompt = `
You are an AI assistant for an email organizer. Analyze the following email content.
Extract the following information and return it as a JSON object.
Ensure the JSON is perfectly valid and can be parsed directly.

1.  Summary: A concise 2-3 sentence summary of the email's main topic and purpose.
2.  Actions: An array of actionable items for anyone (including the recipient of this email, me). Each action should have:
    - text: A clear, actionable description (e.g., "Schedule follow-up meeting").
    - responsible: The name or role of the person responsible (e.g., "John Doe", "Marketing Team", "me"). If it's ambiguous, assume "me" if it sounds like a task for the email recipient.
    - dueDate: A suggested due date in 'YYYY-MM-DD' format if implied (e.g., "next week" -> "2025-06-12"), otherwise an empty string. Consider current date: ${new Date().toISOString().split('T')[0]}.
    - priority: Assign 'high', 'medium', or 'low' based on urgency/importance.
3.  Project: A single, brief string identifying the main project, topic, or department the email belongs to (e.g., "Project Alpha", "HR", "Customer Support", "Sales"). Default to "Unclassified" if no clear project.

Email data:
Subject: ${email.subject}
From: ${email.sender}
Date: ${email.date}
Body: ${email.body || "No body content available."}

Example expected JSON format:
{
  "summary": "Meeting minutes for the Q3 planning session, outlining key decisions and next steps.",
  "actions": [
    {"text": "Finalize Q3 budget proposal", "responsible": "me", "dueDate": "2025-06-15", "priority": "high"},
    {"text": "Send out meeting recap to all attendees", "responsible": "John Doe", "dueDate": "2025-06-07", "priority": "medium"}
  ],
  "project": "Q3 Planning"
}
`;

    try {
   const response = await fetch("https://outlook-summarizer.onrender.com/api/deepseek", {
    method: "POST",
    headers: {
        "Content-Type": "application/json"
    },
    body: JSON.stringify({
        model: "deepseek-chat",
        messages: [
            { role: "system", content: "You are an email analysis assistant." },
            { role: "user", content: prompt }
        ],
        temperature: 0.2,
        max_tokens: 512
    })
});



        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`API error: ${response.status} ${response.statusText} - ${errorData.error?.message || 'Unknown error'}`);
        }

        const result = await response.json();

        // Get the AI's response string
        let aiContent = result.choices?.[0]?.message?.content || "";
        let aiResult;
        try {
            let jsonString = result.choices[0].message.content.trim();
            // Remove leading and trailing markdown code block fences if present
            if (jsonString.startsWith('```json')) {
                jsonString = jsonString.substring(jsonString.indexOf('\n') + 1); // Get content after ```json
            }
            if (jsonString.endsWith('```')) {
                jsonString = jsonString.substring(0, jsonString.lastIndexOf('```')); // Get content before ```
            }
            aiResult = JSON.parse(jsonString);
        } catch (e) {
            console.error("Failed to parse AI response as JSON:", e, result.choices[0].message.content);
            email.summary = "AI response was not valid JSON. Please try again.";
            email.project = "Unclassified";
            email.actions = [];
            return;
        }

        // Assign results to the email object
        email.summary = aiResult.summary || "No summary from AI.";
        email.actions = (aiResult.actions || []).map(a => ({
            text: a.text || "Unnamed action",
            responsible: a.responsible || "Unknown",
            dueDate: a.dueDate || "",
            isMyAction: (a.responsible || "").toLowerCase().includes("me") || (a.responsible || "").toLowerCase().includes("you"),
            priority: (a.priority && ['high', 'medium', 'low'].includes(a.priority.toLowerCase())) ? a.priority.toLowerCase() : "medium"
        }));
        email.project = aiResult.project || "Unclassified";

    } catch (err) {
        console.error("AI request failed:", err);
        email.summary = "AI request failed due to network or API issue.";
        email.project = "Unclassified";
        email.actions = [];
    }
}

// Event listener for email file input
document.addEventListener('DOMContentLoaded', function() {
    const emailFileInput = document.getElementById('emailFileInput');
    if (emailFileInput) {
        emailFileInput.addEventListener('change', async function(event) {
            const files = Array.from(event.target.files);
            if (files.length === 0) return;

            //clearState();  Clear all existing data before importing new ones

            // Optional: show a "loading" indicator
            document.getElementById('emailGrid').innerHTML = '<div class="loading">Importing and analyzing emails...</div>';
            document.getElementById('checklistContainer').innerHTML = '<div class="loading">Analyzing actions...</div>';
            document.getElementById('attachmentsTableBody').innerHTML = '<tr><td colspan="5" style="text-align: center; padding: 40px;">Analyzing attachments...</td></tr>';

            for (const file of files) {
                try {
                    const arrayBuffer = await file.arrayBuffer();
                    // Ensure MSGReader is available. This part was the source of the error.
                    // By placing the event listener inside DOMContentLoaded, we ensure the script is loaded.
                    if (typeof MSGReader === 'undefined') {
                        console.error("MSGReader library is not loaded. Please ensure you have downloaded msgreader.js and DataStream.js and placed them in the same directory.");
                        // Skip processing this file or show a user-friendly error
                        continue;
                    }
                    const msgReader = new MSGReader(arrayBuffer);
                    const msg = msgReader.getFileData();

                    const newEmail = {
                        id: Date.now() + Math.floor(Math.random() * 10000), // simple unique ID
                        subject: msg.subject || "(No subject)",
                        sender: msg.senderEmail || msg.senderName || "Unknown",
                        date: (() => {
                	let rawDateString = msg.messageDeliveryTime || "";
                	if (!rawDateString && msg.headers) {
                   	 // Look for 'Date:' header followed by whitespace and capture the rest of the line
                    	const dateHeaderMatch = msg.headers.match(/^Date:\s*(.*)$/m);
                    	if (dateHeaderMatch && dateHeaderMatch[1]) {
                        rawDateString = dateHeaderMatch[1].trim();
                    	      }
                	   }
                	   return rawDateString;
            		})(),
                        project: "",      // will be filled by AI
                        summary: "",      // will be filled by AI
                        actions: [],      // will be filled by AI
                        attachments: (msg.attachments || []).map(att => att.fileName), // Store only names for now
                        body: (msg.body || msg.bodyHTML || "") // Add body for AI analysis
                    };

                    emails.push(newEmail); // Add to emails list immediately

                    // Call AI analysis for each email
                    await analyzeEmail(newEmail);

                    // After AI analysis, update global lists
                    projects.add(newEmail.project); // Add AI-classified project
                    senders.add(newEmail.sender); // Add sender from email (or AI if classified differently)

                    // Collect attachments
                    (newEmail.attachments || []).forEach(attachmentName => {
                        attachments.push({
                            name: attachmentName,
                            project: newEmail.project, // Use AI-classified project
                            emailSubject: newEmail.subject,
                            date: newEmail.date,
                            emailId: newEmail.id
                        });
                    });

                    // Collect actions (that are for "me")
                    newEmail.actions.forEach(action => {
                        if (action.isMyAction) {
                            actions.push({
                                ...action,
                                emailId: newEmail.id,
                                emailSubject: newEmail.subject,
                                completed: false, // Default to not completed
                                priority: action.priority // Use AI-assigned priority
                            });
                        }
                    });
                } catch (e) {
                    console.error(`Error processing file ${file.name}:`, e);
                    // Provide a user-friendly message for this specific file
                    const errorEmail = {
                        id: Date.now() + Math.floor(Math.random() * 10000),
                        subject: `Error processing: ${file.name}`,
                        sender: "System",
                        date: new Date().toISOString().split('T')[0],
                        project: "Error",
                        summary: `Could not process this email due to an error: ${e.message}`,
                        actions: [],
                        attachments: []
                    };
                    emails.push(errorEmail);
                    // Do not break the loop, continue with other files
                }
            }

            // Refresh UI/filters/statistics after all emails are imported and analyzed
            populateFilters();
            renderEmails();
            renderActions();
            renderAttachments();
            updateStats();
            // Save to local storage for persistence across sessions
            localStorage.setItem('emails', JSON.stringify(emails));
        });
    } else {
        console.error("emailFileInput element not found.");
    }
});

// Filter Modal Functions
function openFilterModal() {
    document.getElementById('filterModal').style.display = 'block';
    renderFilterRules();
}

function closeFilterModal() {
    document.getElementById('filterModal').style.display = 'none';
}

function addFilterRule() {
    const input = document.getElementById('newFilterInput');
    const rule = input.value.trim();
    
    if (rule) {
        const filters = JSON.parse(localStorage.getItem('emailFilters') || '[]');
        filters.push(rule);
        localStorage.setItem('emailFilters', JSON.stringify(filters));
        input.value = '';
        renderFilterRules();
        updateFilterStats();
    }
}

function deleteFilterRule(index) {
    const filters = JSON.parse(localStorage.getItem('emailFilters') || '[]');
    filters.splice(index, 1);
    localStorage.setItem('emailFilters', JSON.stringify(filters));
    renderFilterRules();
    updateFilterStats();
}

function editFilterRule(index) {
    const filters = JSON.parse(localStorage.getItem('emailFilters') || '[]');
    const rule = filters[index];
    const input = document.getElementById('newFilterInput');
    input.value = rule;
    deleteFilterRule(index);
}

function renderFilterRules() {
    const filters = JSON.parse(localStorage.getItem('emailFilters') || '[]');
    const container = document.getElementById('filterRulesList');
    
    if (filters.length === 0) {
        container.innerHTML = '<div class="no-filters-message">No filter rules added yet</div>';
        return;
    }

    container.innerHTML = filters.map((rule, index) => `
        <div class="filter-item">
            <div class="filter-text">${rule}</div>
            <div class="filter-actions">
                <button class="edit-filter-btn" onclick="editFilterRule(${index})">Edit</button>
                <button class="delete-filter-btn" onclick="deleteFilterRule(${index})">Delete</button>
            </div>
        </div>
    `).join('');
}

function updateFilterStats() {
    const filters = JSON.parse(localStorage.getItem('emailFilters') || '[]');
    const stats = document.getElementById('filterStats');
    stats.textContent = `${filters.length} filter rule${filters.length !== 1 ? 's' : ''} active`;
}

        // Initialize language toggle
        function initializeLanguageToggle() {
            const langSwitch = document.getElementById('langSwitch');
            const savedLanguage = localStorage.getItem('contentLanguage') || 'original';
            
            // Set initial state
            currentLanguage = savedLanguage;
            if (savedLanguage === 'es') {
                langSwitch.checked = true;
            }
            
            // Handle toggle change
            langSwitch.addEventListener('change', function() {
                if (this.checked) {
                    currentLanguage = 'es';
                } else {
                    currentLanguage = 'en';
                }
                
                localStorage.setItem('contentLanguage', currentLanguage);
                translateAndRenderAll();
            });
        }

        // Google Translate API function
        async function translateText(text, targetLang) {
            if (!text || text.trim() === '') return text;
            
            try {
                const response = await fetch(`https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=${targetLang}&dt=t&q=${encodeURIComponent(text)}`);
                const data = await response.json();
                
                if (data && data[0] && data[0][0] && data[0][0][0]) {
                    return data[0][0][0];
                }
                return text; // Return original if translation fails
            } catch (error) {
                console.warn('Translation failed:', error);
                return text; // Return original if translation fails
            }
        }

        // Translate email content
        async function translateEmail(email, targetLang) {
            if (!email.translations) {
                email.translations = {};
            }
            
            // Check if translation already exists
            if (email.translations[targetLang]) {
                return email.translations[targetLang];
            }
            
            // Translate subject, summary, and actions
            const translatedSubject = await translateText(email.subject, targetLang);
            const translatedSummary = await translateText(email.summary, targetLang);
            
            const translatedActions = await Promise.all(
                email.actions.map(async (action) => ({
                    ...action,
                    text: await translateText(action.text, targetLang)
                }))
            );
            
            // Store translation
            email.translations[targetLang] = {
                subject: translatedSubject,
                summary: translatedSummary,
                actions: translatedActions
            };
            
            // Save to localStorage
            localStorage.setItem('emails', JSON.stringify(emails));
            
            return email.translations[targetLang];
        }

        // Translate and render emails
        async function translateAndRenderEmails() {
            if (currentLanguage === 'original') {
                renderEmails();
                return;
            }
            
            // Show loading indicator
            const grid = document.getElementById('emailGrid');
            const loadingDiv = document.createElement('div');
            loadingDiv.className = 'loading';
            loadingDiv.textContent = 'Translating content...';
            grid.appendChild(loadingDiv);
            
            // Translate all emails
            for (let email of emails) {
                await translateEmail(email, currentLanguage);
            }
            
            // Remove loading indicator and render
            if (loadingDiv.parentNode) {
                loadingDiv.parentNode.removeChild(loadingDiv);
            }
            renderEmails();
        }

        // Translate and render all content (emails, actions, timeline)
        async function translateAndRenderAll() {
            if (currentLanguage === 'original') {
                renderEmails();
                renderActions();
                loadTimeline();
                return;
            }
            
            // Show loading indicator
            const grid = document.getElementById('emailGrid');
            const loadingDiv = document.createElement('div');
            loadingDiv.className = 'loading';
            loadingDiv.textContent = 'Translating content...';
            grid.appendChild(loadingDiv);
            
            // Translate all emails
            for (let email of emails) {
                await translateEmail(email, currentLanguage);
            }
            
            // Remove loading indicator and render all sections
            if (loadingDiv.parentNode) {
                loadingDiv.parentNode.removeChild(loadingDiv);
            }
            
            // Re-render all sections with translated content
            renderEmails();
            renderActions();
            loadTimeline();
        }

        // Get display content for email based on current language
        function getEmailDisplayContent(email) {
            if (currentLanguage === 'original' || !email.translations || !email.translations[currentLanguage]) {
                return {
                    subject: email.subject,
                    summary: email.summary,
                    actions: email.actions
                };
            }
            
            return email.translations[currentLanguage];
        }

        // Initialize Kanban drag and drop
        function initializeKanbanDragDrop() {
            const columns = document.querySelectorAll('.kanban-column');
            
            columns.forEach(column => {
                column.addEventListener('dragover', handleDragOver);
                column.addEventListener('drop', handleDrop);
                column.addEventListener('dragenter', handleDragEnter);
                column.addEventListener('dragleave', handleDragLeave);
            });

            function handleDragOver(e) {
                e.preventDefault();
            }

            function handleDragEnter(e) {
                e.preventDefault();
                e.currentTarget.classList.add('drag-over');
            }

            function handleDragLeave(e) {
                if (!e.currentTarget.contains(e.relatedTarget)) {
                    e.currentTarget.classList.remove('drag-over');
                }
            }

            function handleDrop(e) {
                e.preventDefault();
                e.currentTarget.classList.remove('drag-over');
                
                const actionIndex = e.dataTransfer.getData('text/plain');
                const targetColumn = e.currentTarget.id;
                
                let newStatus;
                if (targetColumn === 'pendingColumn') newStatus = 'pending';
                else if (targetColumn === 'progressColumn') newStatus = 'progress';
                else if (targetColumn === 'completedColumn') newStatus = 'completed';
                
                if (newStatus && actionIndex !== '') {
                    moveActionToStatus(parseInt(actionIndex), newStatus);
                }
            }

            // Add drag start event to items (will be called after rendering)
            setTimeout(() => {
                const items = document.querySelectorAll('.kanban-item');
                items.forEach(item => {
                    item.addEventListener('dragstart', handleDragStart);
                    item.addEventListener('dragend', handleDragEnd);
                });
            }, 100);

            function handleDragStart(e) {
                e.currentTarget.classList.add('dragging');
                e.dataTransfer.setData('text/plain', e.currentTarget.dataset.actionIndex);
            }

            function handleDragEnd(e) {
                e.currentTarget.classList.remove('dragging');
            }
        }

        // Move action to new status
        function moveActionToStatus(actionIndex, newStatus) {
            if (actions[actionIndex]) {
                actions[actionIndex].status = newStatus;
                
                if (newStatus === 'completed') {
                    actions[actionIndex].completed = true;
                    actions[actionIndex].completedDate = new Date().toISOString();
                } else {
                    actions[actionIndex].completed = false;
                    actions[actionIndex].completedDate = null;
                }
                
                localStorage.setItem('emails', JSON.stringify(emails));
                renderActions();
                updateStats();
                // Refresh other tabs to show updated completion status
                renderEmails(); // Refresh Dashboard
                loadTimeline(); // Refresh Timeline
            }
        }

        // Toggle action status (checkbox click)
        function toggleActionStatus(index) {
            if (actions[index]) {
                const currentStatus = actions[index].status;
                let newStatus;
                
                if (currentStatus === 'pending') {
                    newStatus = 'progress';
                } else if (currentStatus === 'progress') {
                    newStatus = 'completed';
                } else if (currentStatus === 'completed') {
                    newStatus = 'pending';
                }
                
                moveActionToStatus(index, newStatus);
            }
        }

        // Toggle action completion (legacy function - now redirects to toggleActionStatus)
        function toggleAction(index) {
            toggleActionStatus(index);
        }
    </script>
</body>
</html>
